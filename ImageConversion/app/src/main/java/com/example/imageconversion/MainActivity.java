package com.example.imageconversion;

import android.app.Activity;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;

//画像をdrawable等に保存する方法はないので、ログ等で確認した
public class MainActivity extends Activity {
    private Button compressButton;
    private Button decompressButton;
    private TextView resultTextView;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        compressButton = findViewById(R.id.compressButton);
        decompressButton = findViewById(R.id.decompressButton);
        resultTextView = findViewById(R.id.resultTextView);

        //drawableの画像をbype型で取得したい場合は、以下のコードを使用
        //byte[] imageData = ImageConversion.drawableToByteArray(getResources(), R.drawable.pochama);

        compressButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                // 画像を圧縮・エンコード
                byte[] compressedData = ImageConversion.compressImage(getResources(),R.drawable.pochama);
                String base64EncodedData = ImageConversion.encodeToBase64(compressedData);
                Log.d("image","base64 = " + base64EncodedData);
                resultTextView.setText("圧縮・エンコード完了");
            }
        });

        decompressButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                // デコード・解凍
                String base64String = "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";
                byte[] decodedData = ImageConversion.decodeBase64(base64String);
                byte[] decompressedData = ImageConversion.decompressData(decodedData);
                ImageView imageView = findViewById(R.id.imageView); // レイアウト内のImageViewを取得
                Bitmap bitmap = BitmapFactory.decodeByteArray(decompressedData, 0, decompressedData.length);
                imageView.setImageBitmap(bitmap);
                resultTextView.setText("デコード・解凍完了");
            }
        });
    }
}
